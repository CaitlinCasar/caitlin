<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>plotly | Caitlin Casar</title>
    <link>/tag/plotly/</link>
      <atom:link href="/tag/plotly/index.xml" rel="self" type="application/rss+xml" />
    <description>plotly</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 01 Jun 2020 21:14:16 -0500</lastBuildDate>
    <image>
      <url>/images/icon_hu65d040ff31842b946eaf5b8caef82e07_3065_512x512_fill_lanczos_center_2.png</url>
      <title>plotly</title>
      <link>/tag/plotly/</link>
    </image>
    
    <item>
      <title>Making figures for microbial ecology: Interactive NMDS plots</title>
      <link>/post/making_figs_2/</link>
      <pubDate>Mon, 01 Jun 2020 21:14:16 -0500</pubDate>
      <guid>/post/making_figs_2/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This is the one of several tutorials Iâ€™m putting together for making figures that are common in microbial ecology. Today weâ€™ll create an interactive NMDS plot for exploring your microbial community data. NMDS, or Nonmetric Multidimensional Scaling, is a method for dimensionality reduction. This works great for high demensional datasets like microbial communities and makes it visually easy to compare lots of communities to each other. Weâ€™re using NMDS rather than PCA (principle coordinates analysis) because this method can accomodate the Bray-Curtis dissimilarity distance metric, which is better suited for our community data than Euclidean distance. For this tutorial Iâ€™m using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First weâ€™ll need to set up our environment in R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load libraries 
pacman::p_load(tidyverse, plotly, vegan)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, read the OTU data into a dataframe. We can pull the data directy from Github by reading the raw file. You can preview the data in the table below this code chunk.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#read the data into a dataframe
otu_table &amp;lt;- read_delim(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO136_Dec2015toApril2018_noChimera_otuTable_withTaxa_d10000.txt&amp;quot;, delim=&amp;quot;\t&amp;quot;, comment = &amp;quot;# &amp;quot;)

metadata &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/metadata.csv&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs_2/index_files/figure-html//widgets/widget_unnamed-chunk-3.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;First we need to normalize our data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;otu_norm &amp;lt;- otu_table %&amp;gt;%
  select(-taxonomy) %&amp;gt;%
  mutate_at(vars(-`#OTU ID`), funs(./sum(.)*100)) %&amp;gt;% #normalize to relative abundance 
  gather(sample_id, abundance, `7.DeMMO1.Steri.050917`:`18.800.DitchFluid.041818`) %&amp;gt;%
  spread(key = `#OTU ID`,value = &amp;#39;abundance&amp;#39;) %&amp;gt;%
  right_join(metadata %&amp;gt;% select(sample_id)) %&amp;gt;%
  column_to_rownames(&amp;quot;sample_id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, letâ€™s use the metaMDS function in vegan to perform NMDS. Weâ€™ll use the default distance metric, Bray-Curtis dissimilarity, and set the argument k to 2 dimensions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NMDS_ord &amp;lt;- otu_norm %&amp;gt;%
  metaMDS(k=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now letâ€™s pull out the NMDS coordinates for axes MDS1 and MDS2 for plotting purposes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#pull out ordination and vector coordinates for plotting
NMDS_coords &amp;lt;- NMDS_ord[[&amp;quot;points&amp;quot;]] %&amp;gt;%
  as_tibble(rownames = &amp;quot;sample_id&amp;quot;) %&amp;gt;%
  left_join(metadata)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create a dictionary of shapes for our plot like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#make shape dictionary for ploting 
shape_dict &amp;lt;- c(0, 15, 15, 1, 19, 19, 2, 17, 17, 5, 5)
names(shape_dict) &amp;lt;- c(&amp;quot;D1.fluid&amp;quot;, &amp;quot;D1.inert.control&amp;quot;, &amp;quot;D1.mineral&amp;quot;, &amp;quot;D3.fluid&amp;quot;, &amp;quot;D3.inert.control&amp;quot;, &amp;quot;D3.mineral&amp;quot;, &amp;quot;D6.fluid&amp;quot;, &amp;quot;D6.inert.control&amp;quot;, &amp;quot;D6.mineral&amp;quot;,&amp;quot;D3.cont.control&amp;quot;, &amp;quot;ambient.control&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now letâ€™s plot the data!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#NMDS plot with controls 
NMDS_plot &amp;lt;- NMDS_coords %&amp;gt;%
  ggplot(aes(MDS1, MDS2)) +
  geom_point(size=2, alpha=0.8, aes(shape=site.type, color=site.type, label = sample_id)) +
  scale_shape_manual(values=shape_dict) +
  theme(legend.key.size = unit(.5, &amp;quot;cm&amp;quot;))


#visualize interactive plot
ggplotly(NMDS_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;plot.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Now we have a nice interactive plot for exploring the ordination. Easy-peasy! ðŸ˜Ž&lt;/p&gt;
&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork Me&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Making figures for microbial ecology: Interactive bar plots</title>
      <link>/post/making_figs/</link>
      <pubDate>Sun, 31 May 2020 21:14:16 -0500</pubDate>
      <guid>/post/making_figs/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;This is the first of several tutorials Iâ€™m putting together for making figures that are common in microbial ecology. Today weâ€™ll start with an interactive bar plot for exploring your microbial community data. For this tutorial Iâ€™m using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;. You can fork the repo by clicking the button above!&lt;/p&gt;
&lt;p&gt;To generate the data, we sequenced DNA from microbial communities at our study site DeMMO. The raw sequence data was processed with QIIME to produce an OTU table. OTUs, or operational taxonomic units, are bins that differentiate sequences at a 97% similarity threshold. For our purposes, you can think of an OTU as a species of bacteria or archaea. As a microbial ecologist, you might want to compare the taxonomic compositions of your communities. Letâ€™s make a cool html bar plot to explore our microbial community data!&lt;/p&gt;
&lt;p&gt;Before we get started, youâ€™ll need to set up your environment in R. This code depends on the packages being loaded here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load libraries 
pacman::p_load(tidyverse, plotly, randomcoloR)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, read the OTU data into a dataframe. We can pull the data directy from Github by reading the raw file. You can preview the data in the table below this code chunk.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#read the data into a dataframe
otu_table &amp;lt;- read_delim(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO136_Dec2015toApril2018_noChimera_otuTable_withTaxa_d10000.txt&amp;quot;, delim=&amp;quot;\t&amp;quot;, comment = &amp;quot;# &amp;quot;)
metadata &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/metadata.csv&amp;quot;) 

#store the taxonomy for each OTU
taxonomy &amp;lt;- otu_table %&amp;gt;%
  select(`#OTU ID`, taxonomy) %&amp;gt;%
  mutate(tax = gsub(&amp;quot;Gammaproteobacteria; D_3__Betaproteobacteriales&amp;quot;, &amp;quot;Betaproteobacteria; D_3__Betaproteobacteriales&amp;quot;, taxonomy), #fix taxonomy for Beta&amp;#39;s,
         taxonomy = str_remove_all(tax, &amp;quot;D_0__| D_1__| D_2__| D_3__| D_4__| D_5__| D_6__&amp;quot;)) %&amp;gt;%
  separate(taxonomy ,sep=&amp;#39;;&amp;#39;,c(&amp;quot;domain&amp;quot;, &amp;quot;phylum&amp;quot;, &amp;quot;class&amp;quot;, &amp;quot;order&amp;quot;, &amp;quot;family&amp;quot;, &amp;quot;genus&amp;quot;, &amp;quot;species&amp;quot;)) %&amp;gt;%
  gather(level, taxonomy, domain:species)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs/index_files/figure-html//widgets/widget_unnamed-chunk-3.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;We want to look at the community compositions, so first letâ€™s normalize and reshape the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;abundance_table &amp;lt;- otu_table %&amp;gt;%
  select(-taxonomy) %&amp;gt;%
  mutate_at(vars(-`#OTU ID`), funs(./sum(.)*100)) %&amp;gt;% #normalize to relative abundance 
  gather(sample_id, abundance, `7.DeMMO1.Steri.050917`:`18.800.DitchFluid.041818`) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs/index_files/figure-html//widgets/widget_unnamed-chunk-5.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;For plotting purposes, letâ€™s pick a subset of samples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot_samples &amp;lt;- c(&amp;quot;12.DeMMO1.steri.041818&amp;quot;, 
                     &amp;quot;26.DeMMO1.SC1.top.041818&amp;quot;, 
                     &amp;quot;22.DeMMO1.C.top.041818&amp;quot;,
                     &amp;quot;23.DeMMO1.D.top.041818&amp;quot;, 
                     &amp;quot;24.DeMMO1.E.top.041818&amp;quot;,
                     &amp;quot;27.DeMMO1.SC2.top.041818&amp;quot;, 
                     &amp;quot;34.DeMMO1.SC10.top.041818&amp;quot;, 
                     &amp;quot;45.DeMMO1.7.top.041818&amp;quot;,
                     &amp;quot;46.DeMMO1.8.top.041818&amp;quot;, 
                     &amp;quot;47.DeMMO1.9.top.041818&amp;quot;,
                     &amp;quot;14.DeMMO3.steri.041718&amp;quot;, 
                     &amp;quot;51.DeMMO3.A.top.041718&amp;quot;,
                     &amp;quot;27.DeMMO3.T8.top.051117&amp;quot;, 
                     &amp;quot;53.DeMMO3.C.top.041718&amp;quot;, 
                     &amp;quot;54.DeMMO3.D.top.041718&amp;quot;,
                     &amp;quot;55.DeMMO3.E.top.041718&amp;quot;, 
                     &amp;quot;39.DeMMO3.1.top.041718&amp;quot;, 
                     &amp;quot;40.DeMMO3.2.top.041718&amp;quot;,
                     &amp;quot;41.DeMMO3.3.top.041718&amp;quot;, 
                     &amp;quot;56.DeMMO3.F.top.041718&amp;quot;,
                     &amp;quot;12.DeMMO6.Steri#2.051017&amp;quot;, 
                     &amp;quot;13.DeMMO6.T1.top.051017&amp;quot;,
                     &amp;quot;15.DeMMO6.T2.top.051017&amp;quot;, 
                     &amp;quot;17.DeMMO6.T3.top.051017&amp;quot;,
                     &amp;quot;19.DeMMO6.T4.top.051017&amp;quot;,
                     &amp;quot;21.DeMMO6.T5.top.051017&amp;quot;, 
                     &amp;quot;24.DeMMO6.T6.bottom.051017&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, letâ€™s take a look at the phylum level abundances for each sample.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;taxon_abundance_table &amp;lt;- abundance_table %&amp;gt;%
  left_join(taxonomy) %&amp;gt;%
  filter(sample_id %in% barplot_samples &amp;amp; level == &amp;quot;phylum&amp;quot;) %&amp;gt;%
  mutate(taxonomy = if_else(is.na(taxonomy), &amp;quot;Unassigned&amp;quot;, taxonomy))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Letâ€™s make a custom color palette for our phyla.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;phylum_color &amp;lt;- distinctColorPalette(k = length(unique(taxon_abundance_table$taxonomy)))
names(phylum_color) &amp;lt;- unique(taxon_abundance_table$taxonomy)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now, letâ€™s create a stacked bar plot for each site.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bar_plot &amp;lt;- taxon_abundance_table %&amp;gt;%
  left_join(metadata) %&amp;gt;%
  group_by(site, experiment.type, taxonomy) %&amp;gt;%
  summarise(abundance = sum(abundance)) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(experiment.type = factor(experiment.type, levels = c(&amp;quot;fluid&amp;quot;, &amp;quot;inert.control&amp;quot;, &amp;quot;pyrolusite&amp;quot;, &amp;quot;pyrite&amp;quot;,&amp;quot;hematite&amp;quot;,&amp;quot;magnetite&amp;quot;,&amp;quot;siderite&amp;quot;,&amp;quot;gypsum&amp;quot;,&amp;quot;muscovite&amp;quot;,&amp;quot;calcite&amp;quot;))) %&amp;gt;%
  ggplot(aes(fill=taxonomy, y=abundance, x=experiment.type)) +
  geom_bar(stat=&amp;#39;identity&amp;#39;, position=&amp;#39;fill&amp;#39;) +
  scale_fill_manual(values=phylum_color) +
  coord_flip() + 
  theme(axis.title = element_blank(),
        legend.title = ggplot2::element_blank(), 
        legend.text = ggplot2::element_text(size = 8),
        legend.key.size = unit(0.5, &amp;quot;cm&amp;quot;)) +
  facet_grid(cols = vars(site), switch = &amp;quot;y&amp;quot;) + 
  guides(fill = guide_legend(ncol = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, letâ€™s make it easier to explore our data with an html version of our bar plot!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplotly(bar_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;plot.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Ta da! You now have an interactive html version of your plot that you can view in your web browser - just double click the file in your file explorer and it will automatically open. These files are portable, so you can email them to your collaborators and explore the data together. Stay tuned for upcoming tutorials on making figures for microbial ecology!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
