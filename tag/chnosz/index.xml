<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CHNOSZ | Caitlin Casar</title>
    <link>/tag/chnosz/</link>
      <atom:link href="/tag/chnosz/index.xml" rel="self" type="application/rss+xml" />
    <description>CHNOSZ</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 20 Jun 2020 21:14:16 -0500</lastBuildDate>
    <image>
      <url>/images/icon_hu65d040ff31842b946eaf5b8caef82e07_3065_512x512_fill_lanczos_center_2.png</url>
      <title>CHNOSZ</title>
      <link>/tag/chnosz/</link>
    </image>
    
    <item>
      <title>Thermodynamic Modeling with CHNOSZ</title>
      <link>/post/thermodynamic_modeling/</link>
      <pubDate>Sat, 20 Jun 2020 21:14:16 -0500</pubDate>
      <guid>/post/thermodynamic_modeling/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;
Are you curious what sorts of metabolic processes might be occurring at your study site? Using in situ geochemical data, you can model the Gibbs free energy available from metabolic reactions and predict which metabolisms are energetically favorable! Gibbs free energy can be modeled using the following equation:
&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\Delta G_r - RT ln \frac{K_r}{Q_r }\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\Delta G_r\)&lt;/span&gt; is the Gibbs energy of reaction &lt;em&gt;r&lt;/em&gt; under in situ conditions, &lt;span class=&#34;math inline&#34;&gt;\(K_r\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(Q_r\)&lt;/span&gt; are the equillibrium constant and activity product of the &lt;em&gt;r&lt;/em&gt;th reaction, R is the gas constant, and T is temperature in Kelvin.
&lt;/p&gt;
&lt;p&gt;
&lt;span class=&#34;math inline&#34;&gt;\(Q_r\)&lt;/span&gt; can be calculated using the following equation:
&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[Q_r = \prod a_i ^{v_{i,r}}\]&lt;/span&gt;
&lt;p&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; is the activity of the &lt;em&gt;i&lt;/em&gt;th species and &lt;span class=&#34;math inline&#34;&gt;\(v_{i,r}\)&lt;/span&gt; is the stoichiometric coefficient of the &lt;em&gt;i&lt;/em&gt;th species in the &lt;em&gt;r&lt;/em&gt;th reaction.
&lt;/p&gt;
&lt;p&gt;
For this tutorial I’m using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;. We calculated activity coefficients for each species of interest using Spece8 in &lt;a href=&#34;https://www.gwb.com/&#34;&gt;Geochemist’s Workbench&lt;/a&gt; using geochemical data collected from our field site. Then we used the &lt;a href=&#34;https://www.chnosz.net/&#34;&gt;CHNOSZ&lt;/a&gt; package to calculate Gibbs free energy of various metabolic reactions. First, let’s check out what the activity data looks like.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load tidyverse library
pacman::p_load(tidyverse)

activities &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO_SpecE8_aqueousGas.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;
You can see we calculated activites for Ca&lt;sup&gt;2+&lt;/sup&gt;, acetate, CH&lt;sub&gt;4&lt;/sub&gt;, Fe&lt;sup&gt;2+&lt;/sup&gt;, H&lt;sup&gt;+&lt;/sup&gt;, HCO&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, HS&lt;sup&gt;-&lt;/sup&gt;, Mn&lt;sup&gt;2+&lt;/sup&gt;, NH&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;+&lt;/sup&gt;, NO&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, NO&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, and SO&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;2-&lt;/sup&gt; at six different sites called DeMMO1-6.
&lt;/p&gt;
&lt;p&gt;
Once you have your activity coefficients, then you need to decide what reactions you want to model. I was interested in metabolic reactions with minerals, so I created a spreadsheet of balanced reactions with minerals and aqueous species available in situ. Let’s load this data and preview it here.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#import DeMMO mineral reactions
reactions &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/reactions_aq_gas.csv&amp;quot;) %&amp;gt;%
  filter(!product.f == &amp;quot;manganite&amp;quot;) #removing reactions with manganite because we don&amp;#39;t have equation of state data for this &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-4.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;
The formatting of this data is important for compatability with CHNOSZ, so make sure you include the details I’m showing here when you balance your reactions. Notice that the reactant stoichiometric coefficients are negative because they’re on the left side of the reaction, while products are positive because they’re on the right side of the reaction. Now we’re ready to model Gibbs free energy from these reactions in CHNOSZ! First we’ll load the CHNOSZ library.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load the CHNOSZ library
pacman::p_load(CHNOSZ)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the available species for modeling reactions in the CHNOSZ database:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;thermo_db &amp;lt;- thermo()$obigt %&amp;gt;% as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-7.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;A few minerals that I was interested in were missing in the database, but that’s ok! If you have the Gibbs free energy available at stadard conditions and the equation of state data for your reactant, you can add it to the CHNOSZ database. Let’s add pyrolusite and ferrihydrite with the mod.obigt function!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#add pyrolusite to database
pyrolusite &amp;lt;- mod.obigt(&amp;quot;pyrolusite&amp;quot;, G=-111100, H=-124283, S=12.61, V=17.3, formula=&amp;quot;MnO2&amp;quot;, state=&amp;quot;cr&amp;quot;, a1.a=12.55, a2.b=9.761, a3.c=-2.105)

#add ferrihydrite to database
ferrihydrite &amp;lt;- mod.obigt(&amp;quot;ferrihydrite&amp;quot;, G=-111200, H=-127800, S=16.7, V=20.88, formula=&amp;quot;FeOOH&amp;quot;, state=&amp;quot;cr&amp;quot;, a1.a=8.70, a2.b=36.71, a3.c=-1.0146)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can set your temperature and energy units like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set temperature units to Kelvin
T.units(&amp;quot;K&amp;quot;)

#set energy units to joules
E.units(&amp;quot;J&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s calculate logK:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logK &amp;lt;- reactions %&amp;gt;%
  pivot_longer(reactant.a:state.i,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;set&amp;quot;),
               names_pattern = &amp;quot;(.+).(.+)&amp;quot;) %&amp;gt;% #pivot from wide to long dataframe
  unite(&amp;quot;react_prod&amp;quot;, reactant:product, na.rm = TRUE, remove = F) %&amp;gt;% #unite the reactants and products into one column 
  filter(!react_prod == &amp;quot;&amp;quot;) %&amp;gt;% #remove any rows with missing react_prod values
  group_by(rxn.number) %&amp;gt;% #group by reaction number for calculations
  summarise(DeMMO1 = subcrt(react_prod, coeff, state, T=283.45)$out$logK,#calculate logK using in situ DeMMO1 temperature for all other reactions 
         DeMMO2 = subcrt(react_prod, coeff, state, T=285.55)$out$logK,
         DeMMO3 = subcrt(react_prod, coeff, state, T=289.35)$out$logK,
         DeMMO4 = subcrt(react_prod, coeff, state, T=295.65)$out$logK,
         DeMMO5= subcrt(react_prod, coeff, state, T=304.85)$out$logK,
         DeMMO6 = subcrt(react_prod, coeff, state, T=294.65)$out$logK) %&amp;gt;%
  pivot_longer(cols = DeMMO1:DeMMO6, names_to = &amp;quot;Site&amp;quot;, values_to = &amp;quot;LogK&amp;quot;) %&amp;gt;% #pivot from wide to long for merging later 
  distinct() #remove the duplicate rows &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to calculate logQ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;activities &amp;lt;- activities %&amp;gt;%
  pivot_longer(`Ca+2`:CO, names_to = &amp;quot;react_prod&amp;quot;, values_to = &amp;quot;activity&amp;quot;) #pivot from wide to long for joining

logQ &amp;lt;- reactions %&amp;gt;%
  pivot_longer(reactant.a:state.i,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;set&amp;quot;),
               names_pattern = &amp;quot;(.+).(.+)&amp;quot;) %&amp;gt;% #pivot from wide to long 
  unite(&amp;quot;react_prod&amp;quot;, reactant:product, na.rm = TRUE, remove = F) %&amp;gt;% #unite the reactant and product columns into one column called react_prod 
  left_join(activities) %&amp;gt;% #join with the activities data 
  filter(!is.na(activity)) %&amp;gt;% #remove any activities with NA values 
  mutate(logQ = if_else(!is.na(reactant), -abs(coeff)*activity, abs(coeff)*activity)) %&amp;gt;% #multiply each species by its stoichiometric coefficient 
  group_by(rxn.number, Site) %&amp;gt;% #group on the reaction number and site 
  summarise(logQ = sum(logQ)) #calculate logQ &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, it’s time to calculate Gibbs free energy yield from each reaction!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;deltaG &amp;lt;- logK %&amp;gt;%
  left_join(logQ) %&amp;gt;% #join the logK and logQ tables 
  left_join(reactions %&amp;gt;% select(rxn.number, e.transfer, reactant.a)) %&amp;gt;% #add the reaction number, number of electrons transferred, and minerals from each reaction 
  rename(mineral = &amp;quot;reactant.a&amp;quot;) %&amp;gt;% #rename reactant.a to mineral for clarity 
  mutate(deltaG = (-2.303*8.314*283.45*(LogK-logQ))/(e.transfer*1000)) #calculate deltaG for each reaction at each site &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets’s take a look at the deltaG table:
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-13.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s plot the data and see which metabolic reactions with minerals are energetically favorable under in situ conditions at DeMMO:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;deltaG %&amp;gt;%
  ggplot(aes(deltaG, reorder(rxn.number, -deltaG), shape=Site, group=rxn.number)) +
  theme_gray() +
  geom_line(aes(color=mineral), size=2.5, alpha=0.6) + #color each line spanning the deltaG values for the six sites by the mineral in the reaction
  geom_point() + 
  scale_shape_manual(values = c(0,1,2,15,16,17)) + #manually set the shapes for each point to denote the six different sites 
  scale_x_reverse() + #reverse the x-axis to show exergonic values on the right, this is standard for this kind of data
  labs(x=expression(Delta~G[r]~&amp;#39;kJ/mol&amp;#39;~e^{textstyle(&amp;quot;-&amp;quot;)})) + #generate the axis labels
  ylab(&amp;quot;Reaction #&amp;quot;) +
  geom_vline(xintercept = 0, linetype=&amp;quot;dotted&amp;quot;, color = &amp;quot;black&amp;quot;) + #add a vertical line at zero for reference 
  theme(legend.position = c(.1, .6), legend.text=element_text(size=8), legend.title = element_text(size=8, face=&amp;quot;bold&amp;quot;)) + #position the legend on the left 
  theme(legend.key.size =  unit(0.2, &amp;quot;in&amp;quot;)) #resize the legend to make it fit &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/thermodynamic_modeling/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Everything that plots to the right of the dotted line is exergonic, while everything to the left of the dotted line is endergonic. The most exergonic and therefore the most energetically favorable reactions occur with the mineral pyrolusite, followed by pyrite. If you’re curious which reactant was coupled to these minerals for each reaction, refer back to the reactions table above! 👩‍🔬&lt;/p&gt;
&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork Me&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>
