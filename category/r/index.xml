<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Caitlin Casar</title>
    <link>/category/r/</link>
      <atom:link href="/category/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 20 Jun 2020 21:14:16 -0500</lastBuildDate>
    <image>
      <url>/images/icon_hu65d040ff31842b946eaf5b8caef82e07_3065_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>/category/r/</link>
    </image>
    
    <item>
      <title>Thermodynamic Modeling with CHNOSZ</title>
      <link>/post/thermodynamic_modeling/</link>
      <pubDate>Sat, 20 Jun 2020 21:14:16 -0500</pubDate>
      <guid>/post/thermodynamic_modeling/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;
Are you curious what sorts of metabolic processes might be occurring at your study site? Using in situ geochemical data, you can model the Gibbs free energy available from metabolic reactions and predict which metabolisms are energetically favorable! Gibbs free energy can be modeled using the following equation:
&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\Delta G_r - RT ln \frac{K_r}{Q_r }\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\Delta G_r\)&lt;/span&gt; is the Gibbs energy of reaction &lt;em&gt;r&lt;/em&gt; under in situ conditions, &lt;span class=&#34;math inline&#34;&gt;\(K_r\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(Q_r\)&lt;/span&gt; are the equillibrium constant and activity product of the &lt;em&gt;r&lt;/em&gt;th reaction, R is the gas constant, and T is temperature in Kelvin.
&lt;/p&gt;
&lt;p&gt;
&lt;span class=&#34;math inline&#34;&gt;\(Q_r\)&lt;/span&gt; can be calculated using the following equation:
&lt;/p&gt;
&lt;span class=&#34;math display&#34;&gt;\[Q_r = \prod a_i ^{v_{i,r}}\]&lt;/span&gt;
&lt;p&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(a_i\)&lt;/span&gt; is the activity of the &lt;em&gt;i&lt;/em&gt;th species and &lt;span class=&#34;math inline&#34;&gt;\(v_{i,r}\)&lt;/span&gt; is the stoichiometric coefficient of the &lt;em&gt;i&lt;/em&gt;th species in the &lt;em&gt;r&lt;/em&gt;th reaction.
&lt;/p&gt;
&lt;p&gt;
For this tutorial I’m using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;. We calculated activity coefficients for each species of interest using Spece8 in &lt;a href=&#34;https://www.gwb.com/&#34;&gt;Geochemist’s Workbench&lt;/a&gt; using geochemical data collected from our field site. Then we used the &lt;a href=&#34;https://www.chnosz.net/&#34;&gt;CHNOSZ&lt;/a&gt; package to calculate Gibbs free energy of various metabolic reactions. First, let’s check out what the activity data looks like.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load tidyverse library
pacman::p_load(tidyverse)

activities &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO_SpecE8_aqueousGas.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-2.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;
You can see we calculated activites for Ca&lt;sup&gt;2+&lt;/sup&gt;, acetate, CH&lt;sub&gt;4&lt;/sub&gt;, Fe&lt;sup&gt;2+&lt;/sup&gt;, H&lt;sup&gt;+&lt;/sup&gt;, HCO&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, HS&lt;sup&gt;-&lt;/sup&gt;, Mn&lt;sup&gt;2+&lt;/sup&gt;, NH&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;+&lt;/sup&gt;, NO&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, NO&lt;sub&gt;3&lt;/sub&gt;&lt;sup&gt;-&lt;/sup&gt;, and SO&lt;sub&gt;4&lt;/sub&gt;&lt;sup&gt;2-&lt;/sup&gt; at six different sites called DeMMO1-6.
&lt;/p&gt;
&lt;p&gt;
Once you have your activity coefficients, then you need to decide what reactions you want to model. I was interested in metabolic reactions with minerals, so I created a spreadsheet of balanced reactions with minerals and aqueous species available in situ. Let’s load this data and preview it here.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#import DeMMO mineral reactions
reactions &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/reactions_aq_gas.csv&amp;quot;) %&amp;gt;%
  filter(!product.f == &amp;quot;manganite&amp;quot;) #removing reactions with manganite because we don&amp;#39;t have equation of state data for this &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-4.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;
The formatting of this data is important for compatability with CHNOSZ, so make sure you include the details I’m showing here when you balance your reactions. Notice that the reactant stoichiometric coefficients are negative because they’re on the left side of the reaction, while products are positive because they’re on the right side of the reaction. Now we’re ready to model Gibbs free energy from these reactions in CHNOSZ! First we’ll load the CHNOSZ library.
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load the CHNOSZ library
pacman::p_load(CHNOSZ)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s take a look at the available species for modeling reactions in the CHNOSZ database:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;thermo_db &amp;lt;- thermo()$obigt %&amp;gt;% as_tibble()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-3&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-3&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-7.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;A few minerals that I was interested in were missing in the database, but that’s ok! If you have the Gibbs free energy available at stadard conditions and the equation of state data for your reactant, you can add it to the CHNOSZ database. Let’s add pyrolusite and ferrihydrite with the mod.obigt function!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#add pyrolusite to database
pyrolusite &amp;lt;- mod.obigt(&amp;quot;pyrolusite&amp;quot;, G=-111100, H=-124283, S=12.61, V=17.3, formula=&amp;quot;MnO2&amp;quot;, state=&amp;quot;cr&amp;quot;, a1.a=12.55, a2.b=9.761, a3.c=-2.105)

#add ferrihydrite to database
ferrihydrite &amp;lt;- mod.obigt(&amp;quot;ferrihydrite&amp;quot;, G=-111200, H=-127800, S=16.7, V=20.88, formula=&amp;quot;FeOOH&amp;quot;, state=&amp;quot;cr&amp;quot;, a1.a=8.70, a2.b=36.71, a3.c=-1.0146)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can set your temperature and energy units like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set temperature units to Kelvin
T.units(&amp;quot;K&amp;quot;)

#set energy units to joules
E.units(&amp;quot;J&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s calculate logK:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;logK &amp;lt;- reactions %&amp;gt;%
  pivot_longer(reactant.a:state.i,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;set&amp;quot;),
               names_pattern = &amp;quot;(.+).(.+)&amp;quot;) %&amp;gt;% #pivot from wide to long dataframe
  unite(&amp;quot;react_prod&amp;quot;, reactant:product, na.rm = TRUE, remove = F) %&amp;gt;% #unite the reactants and products into one column 
  filter(!react_prod == &amp;quot;&amp;quot;) %&amp;gt;% #remove any rows with missing react_prod values
  group_by(rxn.number) %&amp;gt;% #group by reaction number for calculations
  summarise(DeMMO1 = subcrt(react_prod, coeff, state, T=283.45)$out$logK,#calculate logK using in situ DeMMO1 temperature for all other reactions 
         DeMMO2 = subcrt(react_prod, coeff, state, T=285.55)$out$logK,
         DeMMO3 = subcrt(react_prod, coeff, state, T=289.35)$out$logK,
         DeMMO4 = subcrt(react_prod, coeff, state, T=295.65)$out$logK,
         DeMMO5= subcrt(react_prod, coeff, state, T=304.85)$out$logK,
         DeMMO6 = subcrt(react_prod, coeff, state, T=294.65)$out$logK) %&amp;gt;%
  pivot_longer(cols = DeMMO1:DeMMO6, names_to = &amp;quot;Site&amp;quot;, values_to = &amp;quot;LogK&amp;quot;) %&amp;gt;% #pivot from wide to long for merging later 
  distinct() #remove the duplicate rows &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to calculate logQ:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;activities &amp;lt;- activities %&amp;gt;%
  pivot_longer(`Ca+2`:CO, names_to = &amp;quot;react_prod&amp;quot;, values_to = &amp;quot;activity&amp;quot;) #pivot from wide to long for joining

logQ &amp;lt;- reactions %&amp;gt;%
  pivot_longer(reactant.a:state.i,
               names_to = c(&amp;quot;.value&amp;quot;, &amp;quot;set&amp;quot;),
               names_pattern = &amp;quot;(.+).(.+)&amp;quot;) %&amp;gt;% #pivot from wide to long 
  unite(&amp;quot;react_prod&amp;quot;, reactant:product, na.rm = TRUE, remove = F) %&amp;gt;% #unite the reactant and product columns into one column called react_prod 
  left_join(activities) %&amp;gt;% #join with the activities data 
  filter(!is.na(activity)) %&amp;gt;% #remove any activities with NA values 
  mutate(logQ = if_else(!is.na(reactant), -abs(coeff)*activity, abs(coeff)*activity)) %&amp;gt;% #multiply each species by its stoichiometric coefficient 
  group_by(rxn.number, Site) %&amp;gt;% #group on the reaction number and site 
  summarise(logQ = sum(logQ)) #calculate logQ &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, it’s time to calculate Gibbs free energy yield from each reaction!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;deltaG &amp;lt;- logK %&amp;gt;%
  left_join(logQ) %&amp;gt;% #join the logK and logQ tables 
  left_join(reactions %&amp;gt;% select(rxn.number, e.transfer, reactant.a)) %&amp;gt;% #add the reaction number, number of electrons transferred, and minerals from each reaction 
  rename(mineral = &amp;quot;reactant.a&amp;quot;) %&amp;gt;% #rename reactant.a to mineral for clarity 
  mutate(deltaG = (-2.303*8.314*283.45*(LogK-logQ))/(e.transfer*1000)) #calculate deltaG for each reaction at each site &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets’s take a look at the deltaG table:
&lt;div id=&#34;htmlwidget-4&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-4&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/thermodynamic_modeling/index_files/figure-html//widgets/widget_unnamed-chunk-13.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Now, let’s plot the data and see which metabolic reactions with minerals are energetically favorable under in situ conditions at DeMMO:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;deltaG %&amp;gt;%
  ggplot(aes(deltaG, reorder(rxn.number, -deltaG), shape=Site, group=rxn.number)) +
  theme_gray() +
  geom_line(aes(color=mineral), size=2.5, alpha=0.6) + #color each line spanning the deltaG values for the six sites by the mineral in the reaction
  geom_point() + 
  scale_shape_manual(values = c(0,1,2,15,16,17)) + #manually set the shapes for each point to denote the six different sites 
  scale_x_reverse() + #reverse the x-axis to show exergonic values on the right, this is standard for this kind of data
  labs(x=expression(Delta~G[r]~&amp;#39;kJ/mol&amp;#39;~e^{textstyle(&amp;quot;-&amp;quot;)})) + #generate the axis labels
  ylab(&amp;quot;Reaction #&amp;quot;) +
  geom_vline(xintercept = 0, linetype=&amp;quot;dotted&amp;quot;, color = &amp;quot;black&amp;quot;) + #add a vertical line at zero for reference 
  theme(legend.position = c(.1, .6), legend.text=element_text(size=8), legend.title = element_text(size=8, face=&amp;quot;bold&amp;quot;)) + #position the legend on the left 
  theme(legend.key.size =  unit(0.2, &amp;quot;in&amp;quot;)) #resize the legend to make it fit &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../post/thermodynamic_modeling/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Everything that plots to the right of the dotted line is exergonic, while everything to the left of the dotted line is endergonic. The most exergonic and therefore the most energetically favorable reactions occur with the mineral pyrolusite, followed by pyrite. If you’re curious which reactant was coupled to these minerals for each reaction, refer back to the reactions table above! 👩‍🔬&lt;/p&gt;
&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork Me&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Create your own site with blogdown in R</title>
      <link>/post/blogdown/</link>
      <pubDate>Tue, 09 Jun 2020 21:14:16 -0500</pubDate>
      <guid>/post/blogdown/</guid>
      <description>


&lt;p&gt;Members of the Earth and Planetary Sciences department at Northwestern University are teaming up to spread awareness about diversity and inclusion in support of the Black Lives Matter movement! My contrubution to this effort is creating a space for sharing relevant content and discussion on the web. In addition to creating the site, I want to empower the NU EPS community to contribute to the blog through this tutorial. If you’re not a member of the NU EPS community, this tutorial can help you create your own site and get familiar with the basic functions in Git!&lt;/p&gt;
&lt;div id=&#34;getting-started-with-git-and-github&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started with Git and Github&lt;/h2&gt;
&lt;p&gt;The first thing we need to do is get set up to collaborate on Github. If you’re not familiar with Github, it’s a Git repository hosting service that also provides version control and collaboration features. Git is the version control system that tracks changes in your files and makes it easy to update your repository on Github. If this doesn’t make sense now, that’s ok! Once you see Git and Github in action it should be clear why we’re using it.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Install &lt;a href=&#34;https://www.linode.com/docs/development/version-control/how-to-install-git-on-linux-mac-and-windows/&#34;&gt;Git&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Next, create an account on &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;. If you set up a student account, you’ll have access to private repositories (i.e. if you need to backup unpublished data or code) - I highly recommend this!
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Now, you’ll need to set your credentials in Git. Open up your Mac terminal or &lt;a href=&#34;https://www.atlassian.com/git/tutorials/git-bash&#34;&gt;gitbash&lt;/a&gt; on PC, then use the git config commands to configure your username and email. This will ensure that you have the ability to modify repositories on Github.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#set your user name on github
git config --global user.name &amp;quot;John Doe&amp;quot;

#set your user email on github
git config --global user.email johndoe@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Now, clone the repo I created for the NU Earth Grads site by typing this into your terminal or gitbash:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git clone https://github.com/NUEarthGrads/blogdown&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
The top four commands you’ll need to use git are &lt;em&gt;status&lt;/em&gt;, &lt;em&gt;add&lt;/em&gt;, &lt;em&gt;commit&lt;/em&gt;, and &lt;em&gt;push&lt;/em&gt;. Here’s an example of how to use these - we’ll come back to this in a bit.
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#check the status of your local repo
git status 

#add all new untracked files to the queue
git add .

#commit your changes and add a short description
git commit -a -m &amp;quot;short description here&amp;quot;

#push your changes to the repo on the Github server
git push &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;blogdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Blogdown&lt;/h2&gt;
&lt;p&gt;To create the site, I used a package in R called &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;Blogdown&lt;/a&gt;. This is a great package that makes it really easy to create and update your site using R markdown. If you’re using RStudio with blogdown, you can serve the site locally and preview it right in your RStudio viewer window. It’s super easy to customize your CSS (cascading style sheet) - this is an easy way to change the styling of HTML elements across your site, such as font styles or colors. Blogdown integrates Hugo, a static site generator that has tons of awesome themes ready to go! For this site, I chose the Hugo Academic theme. I’ll walk you through the basics of blogdown, then show you how to create a new blog post!&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
Install &lt;a href=&#34;https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntu&#34;&gt;R and Rstudio&lt;/a&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Install the blogdown package. You can do this in RStudio by entering the following in the console window in RStudio:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;blogdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/blogdown_install.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
To use Hugo in blogdown, install Hugo:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::install_hugo()&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
To generate the Hugo academic theme template site, run the following line in your RStudio console. &lt;strong&gt;Note&lt;/strong&gt; Do not do this if you are updating the NU Earth Grads site, only do this to create a brand new site!
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::new_site(theme = &amp;#39;gcushen/hugo-academic&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
To preview your site in the Viewer window, you can either select “Serve site” from the Addins dropdown menu in RStudio, or run the following in your console:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::serve_site()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/serve_site.png&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
When you are ready to build your site to HTML format for web hosting, run the following in your console:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;blogdown::hugo_build(local=T)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out your Files window in RStudio. You should see a list of files and directories similar to this:&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/files.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The content folder contains the markdown files used to build the site. The public folder contains the files generated by the hugo_build function.&lt;/p&gt;
&lt;ol start=&#34;7&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
If you want version control of the code used to generate your site, you can create a Github repo by running the following in your terminal:
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#change directories to the blodgown directory you created. For example, if you have a directory called &amp;quot;blogdown_site&amp;quot; on your desktop:
cd ~/Desktop/blogdown_site

#initialize a git repository in the directory 
git init

#add all the files to the queue
git add .

#commit the changes and add a short message
git commit -a -m &amp;quot;init commit&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now you have a local repository. In order to host that repo on Github, go to github.com and create a new repository by clicking the green “new” button in the top right. Don’t initialize a README file. Give your repo a name, for example “my_website”. Then click “Create repository” at the bottom.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/git-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/git-2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
In your terminal, run the following:
&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#push your repo to the Github server - note that &amp;#39;username&amp;#39; should be replaced with your Github username and &amp;#39;my_website&amp;#39; should be replaced with the name of the repo you created on Github.
git remote add origin https://github.com/username/my_website

git push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;8&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;
If you created a brand new site and want to host it online, I recommend hosting it on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt; - it’s free!
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
First you’ll need to create a new repo named &lt;em&gt;username.github.io&lt;/em&gt;. Don’t initialize it with a README file. To create the NU EPS site, I created a repo using the organization name NUEarthGrads on Github called NUEarthGrads.github.io. You can see this repo &lt;a href=&#34;https://github.com/NUEarthGrads&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Next, initialize a repo in your public folder in your blogdown directory and push the repo to your github.io repo:
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#change directories into your public folder - this is where the site builds to when you run blogdown::hugo_build(local=T)
cd ~/Desktop/blogdown_site/public

#initialize a git repository in the directory 
git init

#add all the files to the queue
git add .

#commit the changes and add a short message
git commit -a -m &amp;quot;init commit&amp;quot;

#push your repo to the github server
git remote add origin https://github.com/username/username.github.io

git push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
To view your site, go to &lt;a href=&#34;https://username.github.io/&#34; class=&#34;uri&#34;&gt;https://username.github.io/&lt;/a&gt; in your web browser.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-new-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create a new post&lt;/h2&gt;
&lt;p&gt;
We’re finally ready to create a new post! If you cloned the NUEarthGrads repo, open that folder and double click on the blogdown.Rproj file to open the project in RStudio.
&lt;/p&gt;
&lt;p&gt;
Run the following in your RStudio console:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#run the blogdown new_post function to generate a new markdown file in the post directory with today&amp;#39;s date
blogdown::new_post(title = &amp;quot;my blog post title&amp;quot;, subdir=&amp;quot;post/my_blog_post_directory&amp;quot;, date = &amp;quot;June 9 2020&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The Hugo academic theme will add an image next to your post on the home page. To do this, add the image you want to be associated with your post inside the new directory you just created - in this example the directory is called “my_blog_post_directory”. Name the image “featured”, as in “featured.jpg”. Then, rename your new markdown file “index”, as in “index.Rmd”.
&lt;/p&gt;
&lt;p&gt;
Open up the markdown file you just created. You can do this from RStudio by navigating to the file in the Files window pane via the following path: content &amp;gt;&amp;gt; post &amp;gt;&amp;gt;my_blog_post_directory. Then double click on the markdown file.
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/blog_post_file.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
You should see something like this:
&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;post&#34; src=&#34;images/new_post.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;
Here’s an exaple of how to modify the header:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
title: my blog post title
author: ~
date: June 9 2020
slug: June 9 2020-my blog post title
categories: [&amp;quot;Diversity&amp;quot;] #add categories for your post inside the brackets
tags: [&amp;quot;#BLM&amp;quot;, &amp;quot;equity&amp;quot;] #add tags inside the brackets
subtitle: &amp;#39;This is my post!&amp;#39;
summary: &amp;#39;Some info here about this post...This is what will be displayed on the home page.&amp;#39;
authors: [Caitlin] #add your name inside these brackets to indicate who authored the post
lastmod: &amp;#39;2020-06-09T15:36:45-05:00&amp;#39;
featured: no
image:
  caption: &amp;#39;&amp;#39;
  focal_point: &amp;#39;&amp;#39;
  preview_only: no
projects: []
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now you’re ready to add content to your post. Add Rmarkdown formatted text below the header in your markdown file, including images, hyperlinks, plots, code chunks, videos, and more! Here’s an example of some basic content:
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
title: my blog post title
author: ~
date: June 9 2020
slug: June 9 2020-my blog post title
categories: [&amp;quot;Diversity&amp;quot;] #add categories for your post inside the brackets
tags: [&amp;quot;#BLM&amp;quot;, &amp;quot;equity&amp;quot;] #add tags inside the brackets
subtitle: &amp;#39;This is my post!&amp;#39;
summary: &amp;#39;Some info here about this post...This is what will be displayed on the home page.&amp;#39;
authors: [Caitlin] #add your name inside these brackets to indicate who authored the post
lastmod: &amp;#39;2020-06-09T15:36:45-05:00&amp;#39;
featured: no
image:
  caption: &amp;#39;&amp;#39;
  focal_point: &amp;#39;&amp;#39;
  preview_only: no
projects: []
---
  
Hello! This is my *first* blog post! I am **very** excited to share my post with you. I learned how to make this post [here](https://caitlincasar.com/post/blogdown/). 

## Subheader

This is a new section under a subheader. I can make an ordered list:
1. This is item 1
2. This is item 2
3. And this is item 3!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&#34;https://rmarkdown.rstudio.com/authoring_basics.html&#34;&gt;This&lt;/a&gt; is great resource for more of the Rmarkdown basics.
&lt;/p&gt;
&lt;p&gt;
Once you’re done creating your post, just push your changes to Github and you’re done!
&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#change directories into your public folder - this is where the site builds to when you run blogdown::hugo_build(local=T)
cd ~/Desktop/NUEarthGrads/public

#pull in any changes that others may have pushed to Github
git pull

#add the new file
git add .

#commit the changes 
git commit -a -m &amp;quot;adding Caitlin&amp;#39;s new blog post&amp;quot;

#push the changes to the Github server
git push&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now you can see your awesome new post online! Hooray! 🐸
&lt;/p&gt;
&lt;p&gt;
Feel free to comment below with any comments/questions!
&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Making figures for microbial ecology: Interactive NMDS plots</title>
      <link>/post/making_figs_2/</link>
      <pubDate>Mon, 01 Jun 2020 21:14:16 -0500</pubDate>
      <guid>/post/making_figs_2/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This is the one of several tutorials I’m putting together for making figures that are common in microbial ecology. Today we’ll create an interactive NMDS plot for exploring your microbial community data. NMDS, or Nonmetric Multidimensional Scaling, is a method for dimensionality reduction. This works great for high demensional datasets like microbial communities and makes it visually easy to compare lots of communities to each other. We’re using NMDS rather than PCA (principle coordinates analysis) because this method can accomodate the Bray-Curtis dissimilarity distance metric, which is better suited for our community data than Euclidean distance. For this tutorial I’m using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First we’ll need to set up our environment in R:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load libraries 
pacman::p_load(tidyverse, plotly, vegan)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, read the OTU data into a dataframe. We can pull the data directy from Github by reading the raw file. You can preview the data in the table below this code chunk.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#read the data into a dataframe
otu_table &amp;lt;- read_delim(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO136_Dec2015toApril2018_noChimera_otuTable_withTaxa_d10000.txt&amp;quot;, delim=&amp;quot;\t&amp;quot;, comment = &amp;quot;# &amp;quot;)

metadata &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/metadata.csv&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs_2/index_files/figure-html//widgets/widget_unnamed-chunk-3.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;First we need to normalize our data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;otu_norm &amp;lt;- otu_table %&amp;gt;%
  select(-taxonomy) %&amp;gt;%
  mutate_at(vars(-`#OTU ID`), funs(./sum(.)*100)) %&amp;gt;% #normalize to relative abundance 
  gather(sample_id, abundance, `7.DeMMO1.Steri.050917`:`18.800.DitchFluid.041818`) %&amp;gt;%
  spread(key = `#OTU ID`,value = &amp;#39;abundance&amp;#39;) %&amp;gt;%
  right_join(metadata %&amp;gt;% select(sample_id)) %&amp;gt;%
  column_to_rownames(&amp;quot;sample_id&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s use the metaMDS function in vegan to perform NMDS. We’ll use the default distance metric, Bray-Curtis dissimilarity, and set the argument k to 2 dimensions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NMDS_ord &amp;lt;- otu_norm %&amp;gt;%
  metaMDS(k=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s pull out the NMDS coordinates for axes MDS1 and MDS2 for plotting purposes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#pull out ordination and vector coordinates for plotting
NMDS_coords &amp;lt;- NMDS_ord[[&amp;quot;points&amp;quot;]] %&amp;gt;%
  as_tibble(rownames = &amp;quot;sample_id&amp;quot;) %&amp;gt;%
  left_join(metadata)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can create a dictionary of shapes for our plot like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#make shape dictionary for ploting 
shape_dict &amp;lt;- c(0, 15, 15, 1, 19, 19, 2, 17, 17, 5, 5)
names(shape_dict) &amp;lt;- c(&amp;quot;D1.fluid&amp;quot;, &amp;quot;D1.inert.control&amp;quot;, &amp;quot;D1.mineral&amp;quot;, &amp;quot;D3.fluid&amp;quot;, &amp;quot;D3.inert.control&amp;quot;, &amp;quot;D3.mineral&amp;quot;, &amp;quot;D6.fluid&amp;quot;, &amp;quot;D6.inert.control&amp;quot;, &amp;quot;D6.mineral&amp;quot;,&amp;quot;D3.cont.control&amp;quot;, &amp;quot;ambient.control&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s plot the data!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#NMDS plot with controls 
NMDS_plot &amp;lt;- NMDS_coords %&amp;gt;%
  ggplot(aes(MDS1, MDS2)) +
  geom_point(size=2, alpha=0.8, aes(shape=site.type, color=site.type, label = sample_id)) +
  scale_shape_manual(values=shape_dict) +
  theme(legend.key.size = unit(.5, &amp;quot;cm&amp;quot;))


#visualize interactive plot
ggplotly(NMDS_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;plot.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Now we have a nice interactive plot for exploring the ordination. Easy-peasy! 😎&lt;/p&gt;
&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork Me&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Making figures for microbial ecology: Interactive bar plots</title>
      <link>/post/making_figs/</link>
      <pubDate>Sun, 31 May 2020 21:14:16 -0500</pubDate>
      <guid>/post/making_figs/</guid>
      <description>
&lt;script src=&#34;../../rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/pymjs/pym.v1.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;../../rmarkdown-libs/widgetframe-binding/widgetframe.js&#34;&gt;&lt;/script&gt;


&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms&#34; data-icon=&#34;octicon-repo-forked&#34; aria-label=&#34;Fork ntkme/github-buttons on GitHub&#34;&gt;Fork&lt;/a&gt;
&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;This is the first of several tutorials I’m putting together for making figures that are common in microbial ecology. Today we’ll start with an interactive bar plot for exploring your microbial community data. For this tutorial I’m using data and code from my &lt;a href=&#34;https://caitlincasar.com/publication/casar2020/&#34;&gt;publication&lt;/a&gt; in &lt;em&gt;Geobiology&lt;/em&gt;. You can fork the repo by clicking the button above!&lt;/p&gt;
&lt;p&gt;To generate the data, we sequenced DNA from microbial communities at our study site DeMMO. The raw sequence data was processed with QIIME to produce an OTU table. OTUs, or operational taxonomic units, are bins that differentiate sequences at a 97% similarity threshold. For our purposes, you can think of an OTU as a species of bacteria or archaea. As a microbial ecologist, you might want to compare the taxonomic compositions of your communities. Let’s make a cool html bar plot to explore our microbial community data!&lt;/p&gt;
&lt;p&gt;Before we get started, you’ll need to set up your environment in R. This code depends on the packages being loaded here:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#load libraries 
pacman::p_load(tidyverse, plotly, randomcoloR)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, read the OTU data into a dataframe. We can pull the data directy from Github by reading the raw file. You can preview the data in the table below this code chunk.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#read the data into a dataframe
otu_table &amp;lt;- read_delim(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/DeMMO136_Dec2015toApril2018_noChimera_otuTable_withTaxa_d10000.txt&amp;quot;, delim=&amp;quot;\t&amp;quot;, comment = &amp;quot;# &amp;quot;)
metadata &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CaitlinCasar/Casar2020_DeMMO_MineralHostedBiofilms/master/orig_data/metadata.csv&amp;quot;) 

#store the taxonomy for each OTU
taxonomy &amp;lt;- otu_table %&amp;gt;%
  select(`#OTU ID`, taxonomy) %&amp;gt;%
  mutate(tax = gsub(&amp;quot;Gammaproteobacteria; D_3__Betaproteobacteriales&amp;quot;, &amp;quot;Betaproteobacteria; D_3__Betaproteobacteriales&amp;quot;, taxonomy), #fix taxonomy for Beta&amp;#39;s,
         taxonomy = str_remove_all(tax, &amp;quot;D_0__| D_1__| D_2__| D_3__| D_4__| D_5__| D_6__&amp;quot;)) %&amp;gt;%
  separate(taxonomy ,sep=&amp;#39;;&amp;#39;,c(&amp;quot;domain&amp;quot;, &amp;quot;phylum&amp;quot;, &amp;quot;class&amp;quot;, &amp;quot;order&amp;quot;, &amp;quot;family&amp;quot;, &amp;quot;genus&amp;quot;, &amp;quot;species&amp;quot;)) %&amp;gt;%
  gather(level, taxonomy, domain:species)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs/index_files/figure-html//widgets/widget_unnamed-chunk-3.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;We want to look at the community compositions, so first let’s normalize and reshape the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;abundance_table &amp;lt;- otu_table %&amp;gt;%
  select(-taxonomy) %&amp;gt;%
  mutate_at(vars(-`#OTU ID`), funs(./sum(.)*100)) %&amp;gt;% #normalize to relative abundance 
  gather(sample_id, abundance, `7.DeMMO1.Steri.050917`:`18.800.DitchFluid.041818`) &lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-2&#34; style=&#34;width:100%;height:400px;&#34; class=&#34;widgetframe html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-2&#34;&gt;{&#34;x&#34;:{&#34;url&#34;:&#34;/post/making_figs/index_files/figure-html//widgets/widget_unnamed-chunk-5.html&#34;,&#34;options&#34;:{&#34;xdomain&#34;:&#34;*&#34;,&#34;allowfullscreen&#34;:false,&#34;lazyload&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;p&gt;For plotting purposes, let’s pick a subset of samples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;barplot_samples &amp;lt;- c(&amp;quot;12.DeMMO1.steri.041818&amp;quot;, 
                     &amp;quot;26.DeMMO1.SC1.top.041818&amp;quot;, 
                     &amp;quot;22.DeMMO1.C.top.041818&amp;quot;,
                     &amp;quot;23.DeMMO1.D.top.041818&amp;quot;, 
                     &amp;quot;24.DeMMO1.E.top.041818&amp;quot;,
                     &amp;quot;27.DeMMO1.SC2.top.041818&amp;quot;, 
                     &amp;quot;34.DeMMO1.SC10.top.041818&amp;quot;, 
                     &amp;quot;45.DeMMO1.7.top.041818&amp;quot;,
                     &amp;quot;46.DeMMO1.8.top.041818&amp;quot;, 
                     &amp;quot;47.DeMMO1.9.top.041818&amp;quot;,
                     &amp;quot;14.DeMMO3.steri.041718&amp;quot;, 
                     &amp;quot;51.DeMMO3.A.top.041718&amp;quot;,
                     &amp;quot;27.DeMMO3.T8.top.051117&amp;quot;, 
                     &amp;quot;53.DeMMO3.C.top.041718&amp;quot;, 
                     &amp;quot;54.DeMMO3.D.top.041718&amp;quot;,
                     &amp;quot;55.DeMMO3.E.top.041718&amp;quot;, 
                     &amp;quot;39.DeMMO3.1.top.041718&amp;quot;, 
                     &amp;quot;40.DeMMO3.2.top.041718&amp;quot;,
                     &amp;quot;41.DeMMO3.3.top.041718&amp;quot;, 
                     &amp;quot;56.DeMMO3.F.top.041718&amp;quot;,
                     &amp;quot;12.DeMMO6.Steri#2.051017&amp;quot;, 
                     &amp;quot;13.DeMMO6.T1.top.051017&amp;quot;,
                     &amp;quot;15.DeMMO6.T2.top.051017&amp;quot;, 
                     &amp;quot;17.DeMMO6.T3.top.051017&amp;quot;,
                     &amp;quot;19.DeMMO6.T4.top.051017&amp;quot;,
                     &amp;quot;21.DeMMO6.T5.top.051017&amp;quot;, 
                     &amp;quot;24.DeMMO6.T6.bottom.051017&amp;quot;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s take a look at the phylum level abundances for each sample.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;taxon_abundance_table &amp;lt;- abundance_table %&amp;gt;%
  left_join(taxonomy) %&amp;gt;%
  filter(sample_id %in% barplot_samples &amp;amp; level == &amp;quot;phylum&amp;quot;) %&amp;gt;%
  mutate(taxonomy = if_else(is.na(taxonomy), &amp;quot;Unassigned&amp;quot;, taxonomy))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s make a custom color palette for our phyla.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;phylum_color &amp;lt;- distinctColorPalette(k = length(unique(taxon_abundance_table$taxonomy)))
names(phylum_color) &amp;lt;- unique(taxon_abundance_table$taxonomy)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now, let’s create a stacked bar plot for each site.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bar_plot &amp;lt;- taxon_abundance_table %&amp;gt;%
  left_join(metadata) %&amp;gt;%
  group_by(site, experiment.type, taxonomy) %&amp;gt;%
  summarise(abundance = sum(abundance)) %&amp;gt;%
  ungroup() %&amp;gt;%
  mutate(experiment.type = factor(experiment.type, levels = c(&amp;quot;fluid&amp;quot;, &amp;quot;inert.control&amp;quot;, &amp;quot;pyrolusite&amp;quot;, &amp;quot;pyrite&amp;quot;,&amp;quot;hematite&amp;quot;,&amp;quot;magnetite&amp;quot;,&amp;quot;siderite&amp;quot;,&amp;quot;gypsum&amp;quot;,&amp;quot;muscovite&amp;quot;,&amp;quot;calcite&amp;quot;))) %&amp;gt;%
  ggplot(aes(fill=taxonomy, y=abundance, x=experiment.type)) +
  geom_bar(stat=&amp;#39;identity&amp;#39;, position=&amp;#39;fill&amp;#39;) +
  scale_fill_manual(values=phylum_color) +
  coord_flip() + 
  theme(axis.title = element_blank(),
        legend.title = ggplot2::element_blank(), 
        legend.text = ggplot2::element_text(size = 8),
        legend.key.size = unit(0.5, &amp;quot;cm&amp;quot;)) +
  facet_grid(cols = vars(site), switch = &amp;quot;y&amp;quot;) + 
  guides(fill = guide_legend(ncol = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s make it easier to explore our data with an html version of our bar plot!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplotly(bar_plot)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;plot.html&#34; width=&#34;100%&#34; height=&#34;500&#34; style=&#34;border: none;&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;Ta da! You now have an interactive html version of your plot that you can view in your web browser - just double click the file in your file explorer and it will automatically open. These files are portable, so you can email them to your collaborators and explore the data together. Stay tuned for upcoming tutorials on making figures for microbial ecology!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
